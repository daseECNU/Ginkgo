
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 293
#define YY_END_OF_BUFFER 294
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1227] =
    {   0,
        0,    0,    0,    0,    0,    0,  294,  292,  291,  291,
      249,  292,  286,  249,  249,  292,  249,  249,  249,  249,
      232,  232,  292,  252,  256,  253,  292,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  292,  249,  290,  290,  275,  254,    0,
      244,  242,    0,  286,  250,    0,  243,  241,    0,    0,
      232,    0,  234,    0,  288,  233,    0,    0,    0,  285,
      260,  257,  255,  258,  261,    0,  278,    0,    0,  275,
      275,  275,  275,  275,    9,  275,  275,    0,  275,  275,

      275,  275,  275,   20,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
       89,  275,   91,  100,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  135,  275,
      140,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  202,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,    0,  275,  275,  275,
        0,  277,    0,  251,  289,  275,    0,    0,  242,    0,

        0,    0,  241,    0,  287,    0,  237,  233,    0,  247,
        0,  235,  246,  259,    0,  282,    0,  284,    0,  283,
        1,    2,  275,  275,    6,    7,  275,   10,  275,  272,
        0,  275,  275,  275,  275,  275,   16,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,   43,   50,  275,  275,  275,  275,  275,
       60,  275,  275,  275,  275,  275,  275,   67,  275,  275,
      275,  275,  275,  275,  275,   75,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
       97,  275,  275,  104,  275,  275,  275,  275,  275,  275,

      275,  275,  275,  275,  275,  275,  274,  275,  275,  275,
      273,  128,  275,  275,  131,  275,  275,  275,  275,  275,
      142,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  175,  275,  275,
      275,  275,  275,  275,  182,  189,  275,  275,  275,  271,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  212,  275,
      275,  275,  275,  275,  275,  275,  275,  275,    0,  227,
      275,  275,  276,    5,    0,  242,    0,  241,  287,    0,

      236,  279,  281,  280,  275,  275,  275,  275,  248,  275,
      275,  275,  275,  275,   17,   18,  275,   21,  275,   23,
      275,  275,   25,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,   44,  275,
      275,  275,  275,  275,   55,  275,  275,  275,   62,   63,
      275,   64,   65,   68,  275,  275,   71,  275,  275,  275,
      275,  275,  275,   78,   79,  275,  275,   83,  275,  275,
       46,  275,  275,  275,  275,  275,  275,  200,  177,   97,
       14,  275,   99,  275,  102,  105,  106,  275,  275,  109,
      110,  275,  275,  113,  275,  116,  117,  120,  275,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  133,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  153,  155,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  176,  275,  178,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      196,  197,  198,  275,  275,  275,  275,  238,  205,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  223,  221,  275,  275,  225,  275,  245,
      228,  275,    0,    0,    0,    0,    3,  275,  275,  275,

      275,  231,  275,  275,  275,   19,  275,  268,  275,  275,
       26,  275,  275,  275,  275,  275,  275,  275,  275,  270,
      275,   35,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  240,   73,   74,   76,  275,  275,   81,   82,  275,
      275,  275,  275,  103,  275,   93,   94,  275,  275,  275,
      275,  275,  275,  108,  111,  112,  275,  275,  275,  275,
      122,  275,  275,  275,  275,  275,  229,  275,  275,  275,
      275,  275,  275,  141,  143,  275,  275,  275,  275,  275,
      275,  150,  275,  151,  154,  275,  275,  275,  275,  275,

      275,  275,  275,  275,  275,  166,  157,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  192,  275,  275,
      275,  275,  275,  275,  275,  263,  206,  275,  275,  275,
      275,  275,  275,  211,  213,  275,  275,  217,  275,  275,
      275,  222,  224,  226,  275,  275,    8,  275,   12,  275,
       15,  275,   24,  275,  275,  275,   28,  275,  275,  275,
      275,  275,   34,  275,   40,  275,  275,  275,  275,  275,
      275,  275,  275,   54,  275,  275,  275,   61,  275,   66,
      275,   70,  275,   74,  275,  275,   84,  275,  275,  275,

       90,   92,  275,   96,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,   48,  275,  275,  275,  134,
      275,  275,  138,  275,  275,  275,  275,  275,  275,  275,
      275,  157,  275,  159,  160,  275,  275,  275,  164,  165,
      167,  168,  169,   49,  172,  275,  275,  275,  179,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      193,  275,  275,  275,  275,  275,  275,  275,  207,  275,
      208,  275,  210,  266,  275,  275,  217,  275,  275,  275,
      275,    4,  275,   13,   22,  275,  275,   27,   29,  275,
      275,  275,   33,  275,  275,  275,  275,  275,   50,   51,

       52,   53,  275,  275,  275,  275,   69,   72,   77,  275,
      275,  275,  275,  275,   97,  275,  101,  107,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  130,
      275,   50,  275,  275,  144,  275,  275,  147,  275,  275,
      152,  275,  158,  161,  162,  275,  170,  275,  275,  275,
      275,  180,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  262,  275,  275,  275,  275,  275,  275,  204,  239,
      275,  275,  275,  275,  219,  220,  275,  275,  275,  275,
      275,  275,   32,  269,  275,   41,   45,  275,  275,   56,
      275,   58,  275,   80,  275,  275,  275,  275,  275,   98,

      275,  118,  119,  275,  275,  275,  275,  275,  275,  275,
      275,  129,  275,  137,  275,  275,  275,  275,  275,  275,
      163,  275,  275,  275,  181,  275,  184,  275,  275,  275,
      275,  190,  275,  275,  275,  275,  275,  201,  203,  209,
      214,  215,  275,  275,  230,  275,   25,  267,   30,  275,
      275,  275,  275,   42,  264,  265,  275,  275,  136,  275,
      275,  275,  275,  275,  114,  275,  275,  124,  275,  275,
      124,  275,  275,  275,  275,  275,  146,  148,  275,  275,
      275,  173,  174,  275,  275,  275,  275,  275,  275,  275,
      194,  275,  199,  275,  218,  275,  275,   31,  275,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      123,  125,  275,  275,  275,  275,  139,  275,  149,  156,
      275,  275,  185,  275,  275,  275,  275,  195,  275,  275,
      275,  275,  275,  275,  275,   59,  275,  275,   87,   88,
       95,  275,  275,   47,  275,  275,  275,  145,  275,  275,
      275,  275,  275,  275,  275,  275,  275,   36,   37,   39,
      275,  275,  275,  275,  121,  275,  275,  275,  275,  183,
      275,  275,  275,  275,  275,  219,  275,  275,   57,   85,
      275,  275,  275,  127,  275,  275,  275,  275,  275,  191,
      216,   11,  275,  275,  115,  275,  275,  275,  186,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  275,   86,
      275,  275,  275,  275,  188,   38,  275,  275,  275,  275,
      126,  132,  171,  275,  187,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
        8,   12,   13,    8,   14,   15,   16,   17,   18,   19,
       20,   21,   20,   20,   20,   22,   20,   23,    8,   24,
       25,   26,    1,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
        1,   54,    1,    8,   55,   56,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,    1,   83,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[84] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    1,    4,    1,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    1,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    1,    7,    8,    6,    6,    6,    6,
        6,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1
    } ;

static yyconst flex_int16_t yy_base[1247] =
    {   0,
        0,    0,  706,  700,   56,   57,  710, 2676, 2676, 2676,
      684,   83,    0, 2676,  614,   84,   78,   87,   98,  610,
      145,  107,  585,   65, 2676,   85,  126,  195,  264,  141,
      143,  182,  236,   47,  113,  268,   61,  195,  247,  263,
      145,  278,  294,   75,  317,  361,  407,  340,  115,  301,
      138,  129,  163,  232,  526, 2676,  590,  451, 2676,  153,
     2676,  595,  287,    0, 2676,  143, 2676,  580,  147,  437,
      486,  541,  495,  466, 2676,  513,  116,  540,    0, 2676,
     2676,  514, 2676, 2676, 2676,  534,  189,  533,  522,    0,
      180,  190,  342,  170,  200,  185,  217,  127,  364,  343,

      211,  222,  243,    0,  378,  413,  524,  389,  302,  415,
      536,  398,  315,  358,  467,  418,  447,  507,  490,  505,
      503,  497,  508,  506,  526,  537,  557,  540,  544,  539,
        0,  547,  588,    0,  559,  560,  550,  564,  580,  586,
      610,  592,  602,  616,  613,  589,  594,  638,    0,  598,
      630,  619,  626,  652,  634,  657,  696,  648,  651,  652,
      652,  661,  708,  655,  670,  662,  687,  660,  665,  718,
      712,  676,  737,  704,  716,    0,  751,  758,  730,  773,
      724,  768,  730,  778,  746,  759,    0,  753,  772,  758,
      832, 2676,  486, 2676, 2676,  809,  374,  816,  841,  846,

      455,  842,  847,  850,    0,  854,  860,  888,  904,  259,
      894,  910,    0, 2676,  137, 2676,  144, 2676,  324, 2676,
        0,    0,  780,  815,    0,    0,  823,    0,  814,    0,
      881,  816,  827,  814,  829,  840,    0,  890,  898,  902,
      896,  906,  896,  909,  901,  903,  903,  927,  905,  922,
      906,  909,  928,    0,  952,  929,  962,  947,  946,  945,
        0,  964,  952,  957,  958,  963,  967,    0,  960,  973,
      962,  965,  964,  981,  984,  983,  974,  977,  977,  983,
      997,  998, 1000,  991, 1004, 1016, 1013, 1018, 1003, 1020,
     1050, 1009, 1014, 1010, 1018, 1027, 1012, 1030, 1030, 1035,

     1039, 1062, 1039, 1031,  420, 1059,    0, 1057, 1049, 1066,
     1050, 1065, 1057, 1058,    0, 1057, 1069, 1080, 1074, 1081,
     1082, 1069, 1087, 1080, 1094, 1091, 1083, 1102, 1109, 1102,
     1115, 1118, 1123, 1120, 1107, 1109, 1110, 1120, 1129, 1127,
     1127, 1124, 1136, 1128, 1139, 1126, 1145,    0, 1124, 1136,
     1146, 1154, 1136, 1156, 1173,    0, 1144, 1164, 1152,    0,
     1167, 1165, 1169, 1163, 1172, 1182, 1164, 1181, 1186, 1190,
     1182, 1187, 1184, 1188, 1196, 1205, 1204, 1206,    0, 1200,
      411, 1196, 1227, 1209, 1222, 1225, 1231, 1221,  451,    0,
     1226, 1230, 2676,    0,  409,  696,  492,  805,    0, 1285,

     1292, 2676, 2676, 2676, 1242, 1236, 1248,  396, 2676, 1245,
     1250, 1262, 1257, 1254,    0,    0, 1283,    0, 1293,    0,
      384, 1288, 1296, 1287, 1294, 1301, 1290, 1299, 1296, 1286,
     1298, 1303, 1289, 1290, 1292, 1307, 1298, 1312, 1301, 1302,
     1315, 1297, 1294, 1300, 1304, 1307, 1321, 1334,    0,    0,
     1343,    0, 1344,    0, 1339, 1336,    0, 1356, 1353, 1352,
     1341, 1357, 1354,    0, 1344, 1345, 1350,    0, 1353,  319,
      317, 1350, 1345, 1358, 1353, 1352, 1359,    0,    0,    0,
        0, 1396,    0, 1375,    0,    0,    0, 1369, 1374,    0,
        0, 1360, 1364,    0, 1376,    0, 1402,    0, 1394, 1403,

     1392, 1400, 1404, 1398, 1413, 1412, 1403, 1405,    0, 1419,
     1407, 1413, 1409, 1411, 1421, 1422, 1425, 1434, 1431, 1432,
     1433, 1421, 1435, 1442,    0, 1444, 1444, 1468, 1458, 1471,
     1472, 1465, 1458, 1459, 1467, 1459, 1475, 1460, 1470, 1470,
     1470, 1482, 1477, 1469,    0, 1476,    0, 1476, 1483, 1484,
     1470, 1475, 1495, 1517, 1479, 1495, 1506, 1522, 1514, 1521,
        0,    0, 1512, 1523, 1522, 1528,  358,    0,    0, 1523,
     1517, 1524, 1537, 1534, 1522, 1526, 1540, 1539, 1558, 1542,
     1541, 1543, 1543,    0,    0, 1548, 1549,    0, 1552, 2676,
        0, 1571, 1606, 1607,  893, 1604,    0, 1562, 1585, 1581,

     1587,    0, 1588, 1574, 1570,    0, 1592, 2676, 1592, 1595,
        0, 1580, 1580, 1587, 1589, 1588, 1591, 1596, 1593,    0,
     1607,    0, 1599, 1596, 1614, 1607, 1634, 1619, 1618, 1634,
     1642, 1643, 1641, 1638, 1638, 1649, 1652, 1650, 1652, 1639,
     1650,    0,    0,  336,    0, 1653, 1656,    0,    0, 1655,
     1647, 1653, 1662,    0, 1663,    0,    0, 1650, 1650, 1666,
     1651, 1654, 1664,    0,    0,    0, 1673, 1682, 1699, 1687,
        0, 1693, 1689, 1704, 1705, 1702,    0, 1711, 1704, 1696,
     1706, 1707, 1703,    0,    0, 1706, 1699, 1701, 1703, 1720,
     1722,    0, 1721,    0,    0, 1722, 1712, 1710, 1725, 1711,

     1729, 1718, 1742, 1738, 1757,    0,    0, 1747, 1759, 1765,
     1763, 1748, 1749, 1769, 1762, 1767, 1772, 1768, 1772, 1775,
     1759, 1769, 1778, 1769, 1774, 1777, 1767, 1767, 1769, 1774,
     1769, 1776, 1789, 1800, 1805, 2676,    0, 1815, 1798, 1811,
     1810, 1820,  356,    0,    0, 1825, 1818, 1809, 1815, 1829,
     1817,    0,    0,    0, 1823, 1828,    0, 1820,    0, 1821,
        0, 1831,    0, 1817, 1837, 1836,    0, 1822, 1834, 1843,
     1824, 1826,    0, 1827,    0, 1829, 1839, 1863, 1847, 1866,
     1874, 1860, 1878,    0, 1881, 1875, 1882,    0, 1885,    0,
     1883,    0, 1874,    0, 1875, 1866,    0, 1873, 1883, 1888,

        0,    0, 1885,    0, 1877, 1897, 1894, 1893, 1892, 1887,
     1879, 1895, 1932, 1901, 1901,  309, 1920, 1914, 1916,    0,
     1934, 1912, 1939, 1937, 1934, 1935, 1920, 1925, 1927, 1930,
     1935,    0, 1945,    0,    0, 1946, 1948, 1953,    0,    0,
        0,    0, 1938,  306,    0, 1949, 1939, 1946,    0, 1949,
     1953, 1959, 1948, 1969, 1977, 1980, 1993, 1981, 1988, 2017,
        0, 1997, 1998, 1999, 1982, 1979, 1990, 1987,    0, 1992,
        0, 2002,    0, 2676, 1988, 1996,    0, 2009, 1993, 2007,
     2003,    0, 2013,    0,    0, 2012, 2013,    0,    0, 2004,
     2011, 2017,  349,  299, 2025, 2036, 2038, 2048,    0,    0,

        0,    0, 2047, 2039, 2034, 2036,    0,    0,    0, 2037,
     2049, 2058, 2057, 2042,    0, 2051,    0,    0, 2051, 2063,
     2046, 2052, 2056, 2055, 2068, 2071, 2061, 2065, 2057,    0,
     2072,    0, 2075, 2076,    0, 2084, 2085,    0, 2090, 2101,
        0, 2108,    0,    0,    0, 2092,    0, 2101, 2093, 2101,
     2098,    0, 2116, 2104, 2116, 2113,  239, 2120, 2112, 2118,
     2106, 2676, 2113, 2112, 2111, 2119, 2113, 2127,    0,    0,
     2131, 2131, 2133, 2124, 2145,    0, 2145, 2140, 2148,  276,
     2154, 2155,    0, 2676, 2168, 2151,    0,  274,  260,    0,
     2164, 2156, 2171,    0, 2162, 2160, 2158, 2165, 2172,    0,

     2177,    0,    0, 2165, 2169, 2165, 2166, 2176, 2172, 2184,
     2189,    0,  199,    0, 2184, 2186, 2190, 2210, 2201, 2219,
        0, 2217, 2222, 2210,    0, 2210,    0, 2217, 2214,  194,
     2222,    0,  191, 2228, 2211, 2232, 2222,    0,    0,    0,
        0, 2220, 2215, 2238,    0, 2237,    0, 2676,    0, 2223,
     2245, 2238, 2229,    0, 2676, 2676, 2230, 2235,    0, 2233,
     2237, 2234, 2244, 2240, 2254, 2265, 2280,    0, 2264, 2271,
        0, 2283, 2285, 2269, 2265, 2287,    0,    0, 2279, 2275,
     2292,    0,    0, 2287, 2290, 2293, 2293,  164, 2290,  181,
        0, 2297,    0, 2284,    0, 2285, 2293,    0, 2287, 2295,

     2304, 2290, 2289, 2307, 2301, 2326, 2328, 2335, 2322, 2323,
        0,    0, 2340, 2328, 2332, 2333,    0, 2346,    0,    0,
     2333, 2337,    0, 2334, 2339, 2337, 2341,    0, 2356, 2353,
     2354, 2357, 2358, 2346, 2356,    0, 2346, 2362,    0,    0,
        0, 2367, 2345,    0, 2359, 2364,  126,    0, 2374, 2376,
     2377, 2379, 2396, 2393, 2391, 2387, 2392,    0, 2389,    0,
     2406, 2385, 2408, 2399,    0, 2394, 2410, 2413, 2397,    0,
     2405, 2406, 2402, 2408, 2407,    0, 2404, 2405,    0,    0,
     2411, 2412, 2427,    0, 2427, 2442, 2428, 2452, 2437,    0,
        0,    0, 2458, 2446,    0, 2459, 2449, 2461,    0,   96,

     2454, 2454, 2464, 2454, 2458, 2456, 2454, 2453, 2458,    0,
     2461, 2463, 2465, 2465,    0,    0, 2477, 2475, 2479, 2461,
        0,    0,    0, 2467,    0, 2676, 2542, 2550, 2558, 2566,
     2572, 2575, 2582, 2589, 2597,  129, 2605, 2613, 2621,  106,
     2628, 2635, 2643, 2651, 2659, 2667
    } ;

static yyconst flex_int16_t yy_def[1247] =
    {   0,
     1226,    1, 1227, 1227,    1,    1, 1226, 1226, 1226, 1226,
     1226, 1228, 1229, 1226, 1226, 1230, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1231, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1233, 1226, 1226, 1226, 1232, 1226, 1228,
     1226, 1226, 1234, 1229, 1226, 1230, 1226, 1226, 1235, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1236, 1226,
     1226, 1226, 1226, 1226, 1226, 1237, 1231, 1238, 1239, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1226, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1240, 1232, 1232, 1232,
     1233, 1226, 1241, 1226, 1226, 1232, 1242, 1228, 1228, 1234,

     1243, 1230, 1230, 1235, 1244, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1236, 1226, 1237, 1226, 1238, 1226, 1239, 1226,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1226, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1240, 1232,
     1232, 1232, 1226, 1232, 1245, 1242, 1246, 1243, 1244, 1226,

     1226, 1226, 1226, 1226, 1232, 1232, 1232, 1232, 1226, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1226,
     1232, 1232, 1242, 1245, 1243, 1246, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1226, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1226, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1226, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1226, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1226, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1226, 1232, 1232,
     1232, 1232, 1232, 1232, 1226, 1226, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232,    0, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226
    } ;

static yyconst flex_int16_t yy_nxt[2760] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,   14,   15,   16,
       14,   14,   17,   18,   19,   20,   21,   22,   22,   22,
       22,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,    8,    8,   54,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   55,   58,   58,   61,   67,   62,   81,   82,
       83,  127,   70,   68,   71,   71,   71,   71,   71,   71,

       72,   70,  136,   71,   71,   71,   71,   71,   71,   84,
       85,  389,   58,   58,   73,   73,   73,   73,   73,   73,
      127,   76,  156,   71,   71,   71,   71,   71,   71,   74,
       86,  136,  210,  210,  213,   88,   63,   69,   78,  216,
      128,  402,  182,  231,  231,   67,  218,  187,  129,   67,
     1207,  156,   68,  403,  130,   61,  203,   62,   74,   76,
      189,   71,   71,   71,   71,   71,   71,   78,  105,  128,
      110,  182,  146,   77,  111,  106,   78,  129,  112,  188,
     1168,   89,  107,  130,  113,  108,  147,  114,  109,  189,
      115,  962,  148, 1226,  190,   79,   69,  105, 1226,  110,

      204,  146,   77,  111,  106,   78,   63,  112,  188,  116,
      221,  107,  227,  113,  108,  147,  114,  109, 1126,  115,
      117,  148,  118,  190,   79,   91,  137,  119,  222,  228,
      138,  229,  120,   92,  192,   93,  223,   94,  116,  221,
       95,  227,   96,   97, 1226, 1089,  193,  193, 1087,  117,
      230,  118,  238, 1074,   91,  137,  119,  222,  228,  138,
      229,  120,   92,  121,   93,  223,   94,  122,  239,   95,
     1056,   96,   97,   98,  123,  210,  210,  124,  139,  230,
      125,  238,  140,  126, 1055,  193, 1048,  240,  141,   61,
      142,  199,  121, 1029,  143,   99,  122,  239,  144,  100,

      131,  132,  101,  123,  145,  102,  124,  139,  133,  125,
      103,  140,  126,  134,  135,  104,  240,  141,  149,  142,
      150,  153,  151,  143,   99,  152,  220,  144,  100,  131,
      132,  101,  183,  145,  102,  184,  185,  133,  154,  103,
      200,  155,  134,  135,  104,  186,  252,  149,  157,  150,
      153,  151,  158,  985,  152,  159,  794,  788,  160,  984,
      948,  183,  262,  928,  184,  185,  874,  154,  736,  224,
      155,  652,  225,  651,  186,  252,  235,  157,   62,  404,
      178,  158,  179,  236,  159,  180,  181,  160,  161,  237,
      162,  262,  163,  226,  608,  164,  232,  233,  224,  263,

      165,  225,  166,  167,  168,  235,  169,  170,  171,  178,
      234,  179,  236,  396,  180,  181,  241,  161,  237,  162,
      250,  163,  226,  242,  164,  232,  233,  395,  263,  165,
      251,  166,  167,  168,  172,  169,  170,  171,  173,  234,
      243,  174,  175,  260,  244,  241,  261,  266,  176,  250,
      600,  177,  242,   73,   73,   73,   73,   73,   73,  251,
      590,  253,  594,  172,   68,  579,  254,  173,   74,  243,
      174,  175,  260,  244,  499,  261,  266,  176,  206,  206,
      177,   91,  207,  207,  207,  207,  207,  207,  192,   92,
      253,  196,  267,   94,  264,  254,   95,   74,   96,   97,

       76,  398,   71,   71,   71,   71,   71,   71,  397,  265,
       91,   73,   73,   73,   73,   73,   73,   78,   92,  270,
      196,  267,   94,  264,  220,   95,   74,   96,   97,  208,
      208,  208,  208,  208,  208,  218,  216,  268,  265,  214,
      271,  273,  205,  274,  209,  596,   78,  272,  270,  275,
      276,  245,  211,  211,  269,   74,  212,  212,  212,  212,
      212,  212,  246,  247,  248,  255,  268,  277,  256,  271,
      273,  249,  274,  209,  257,  278,  272,  283,  275,  276,
      245,  258,  259,  269,  279,  281,  284,  285,  282,  201,
      292,  246,  247,  248,  255,  293,  277,  256,  280,  197,

      249,  294,  295,  257,  278,  195,  283,  296,  194,   80,
      258,  259,  297,  279,  281,  284,  285,  282,  286,  292,
      287,   75,   65,  298,  293,  299,  300,  280,  288,  289,
      294,  295,  308,  290,  291,  314,  296,  301,  306,  302,
      315,  297,  307,  312,  319,  309,  310,  286,  316,  287,
      303,  304,  298,  313,  299,  300,  311,  288,  289,  305,
      320,  308,  290,  291,  314,  321,  301,  306,  302,  315,
      322,  307,  312,  319,  309,  310,  317,  318,  326,  303,
      304,  339,  313,  323,  327,  311,  340,  324,  305,  320,
      341,  342,  328,  325,  321,  343,  349,  350,  355,  322,

      396,  351,  352,  356,  361,  317,  318,  326,   59, 1226,
      339,   57,  323,  327,  353,  340,  324,   57,  354,  341,
      342,  328,  325,  329,  343,  349,  350,  355,  330,  331,
      351,  352,  356,  361,  332,  365,  333,  344,  334,  335,
      359,  336,  337,  353,  338,  357,  345,  354,  346,  395,
      347,  360,  329,  381,  348,  366,  367,  330,  331, 1226,
      376,  384,  358,  332,  365,  333,  344,  334,  335,  359,
      336,  337,  377,  338,  357,  345,  362,  346,  368,  347,
      360,  363,  381,  348,  366,  367,  369,  364,  371,  376,
      384,  358,  387,  372,  388,  373,  374,  390,  370,  391,

      378,  377,  392,  375,  379,  362,  382,  368,  380,  385,
      363,  405,  383,  386,  398,  369,  364,  371,   61, 1226,
       62,  387,  372,  388,  373,  374,  390,  370,  391,  378,
     1226,  392,  375,  379,  192,  382,  224,  380,  385,  394,
      405,  383,  386,   61,   67,  396,  193,  193,   61,   67,
      199,   68,   67,  406,  407,  408,  398,  410,  397,  203,
      226, 1226,  411,  412,  413,  224, 1226,  414,  394,   63,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  406,  407,  408,  193,  410,  393, 1226,  226,
      409,  411,  412,  413,   63,   69,  414,  231,  231,  200,

       69, 1226,   68,  204,  208,  208,  208,  208,  208,  208,
      212,  212,  212,  212,  212,  212,  400,  400,  415,  209,
      401,  401,  401,  401,  401,  401,  212,  212,  212,  212,
      212,  212,  416,  417,  418,  419,  422,  420,  424,  425,
      423,  426,  428, 1226, 1226,  433,  397,  415,  209,  434,
      427,  435,  421,  436,  437,  438,  442,  429, 1226,  439,
     1226,  416,  417,  418,  419,  422,  420,  424,  425,  423,
      426,  428,  430,  431,  433,  432,  445,  446,  434,  427,
      435,  421,  436,  437,  438,  442,  429,  440,  439,  443,
      441,  447,  448,  444,  449,  450,  451,  452,  453,  454,

      455,  430,  431,  458,  432,  445,  446,  456,  457,  459,
      460,  461,  462,  464,  463,  465,  440,  466,  443,  441,
      447,  448,  444,  449,  450,  451,  452,  453,  454,  455,
      467,  468,  458,  469,  470,  471,  456,  457,  459,  460,
      461,  462,  464,  463,  465,  472,  466,  473,  474,  475,
      476,  477, 1226,  484,  485,  486,  487,  488,  490,  467,
      468,  491,  469,  470,  471,  492,  493,  478,  479,  494,
      480,  481,  497,  498,  472,  489,  473,  474,  475,  476,
      477,  482,  484,  485,  486,  487,  488,  490,  500,  495,
      491,  483,  501,  502,  492,  493,  503,  504,  494,  496,

      505,  497,  498,  506,  489,  507,  508,  509,  510,  512,
      482,  511,  513,  514,  515,  516,  517,  500,  495,  518,
      483,  501,  502,  519,  521,  503,  504,  522,  496,  505,
      520,  523,  506,  526,  507,  508,  509,  510,  512,  524,
      511,  513,  514,  515,  516,  517,  527,  525,  518,  528,
      529,  530,  519,  521,  532,  533,  522,  534,  531,  520,
      523,  535,  526,  536,  537,  538,  539,  540,  524,  541,
      542,  543,  544,  545,  546,  527,  525,  547,  528,  529,
      530,  548,  549,  532,  533,  550,  534,  531,  555, 1226,
      535,  556,  536,  537,  538,  539,  540,  557,  541,  542,

      543,  544,  545,  546,  551,  558,  547,  559,  560,  561,
      548,  549,  562,  563,  550,  564,  565,  555,  552,  566,
      556,  568,  553,  569,  572,  567,  557,  554,  570,  573,
      571,  574,  575,  551,  558,  576,  559,  560,  561,  577,
      578,  562,  563,  580,  564,  565,  584,  552,  566, 1226,
      568,  553,  569,  572,  567,  581,  582,  570,  573,  571,
      574,  575,  585,  587,  576,  588,  586,  589,  577,  578,
      591,  592,  580, 1226, 1226,  584, 1226, 1226,  583, 1226,
     1226, 1226, 1226, 1226,  581,  582,  597,  598,  599,  601,
      602,  585,  587,  603,  588,  586,  589,  604,  605,  591,

      592,  401,  401,  401,  401,  401,  401,  583,  401,  401,
      401,  401,  401,  401,  606,  597,  598,  599,  601,  602,
      607,  609,  603,  610,  611,  612,  604,  605,  613,  614,
      615,  616,  617,  618,  619,  620,  621,  622,  623,  624,
      625,  628,  629,  606,  630,  631,  632,  626,  633,  607,
      609,  634,  610,  611,  612,  627,  635,  613,  614,  615,
      616,  617,  618,  619,  620,  621,  622,  623,  624,  625,
      628,  629,  636,  630,  631,  632,  626,  633,  637,  638,
      634,  639,  640,  641,  642,  635,  643,  644,  645,  646,
      647,  648,  649,  650,  653,  654,  655,  656,  657,  658,

     1226,  636,  662,  659,  663,  664,  665,  637,  638,  666,
      639,  640,  641,  642,  667,  643,  644,  645,  646,  647,
      648,  649,  650,  653,  654,  655,  656,  657,  658,  660,
      668,  662,  659,  663,  664,  665,  670,  671,  666,  672,
      661,  673,  674,  667,  675,  676,  677,  678,  669,  679,
      680,  681,  682,  684,  683,  685,  686,  687,  660,  668,
      688,  689,  690,  691,  692,  670,  671,  693,  672,  661,
      673,  674,  694,  675,  676,  677,  678,  669,  679,  680,
      681,  682,  684,  683,  685,  686,  687,  695,  696,  688,
      689,  690,  691,  692,  697,  698,  693,  699,  700,  701,

      702,  694,  703,  704,  705,  706,  707,  708,  709,  710,
      711,  712,  713,  714,  715,  716,  695,  696,  717,  718,
      719,  720,  721,  697,  698,  725,  699,  700,  701,  702,
      726,  703,  704,  705,  706,  707,  708,  709,  710,  711,
      712,  713,  714,  715,  716,  722,  723,  717,  718,  719,
      720,  721,  727,  728,  725,  729,  730,  731,  732,  726,
      734,  735,  724,  737,  738,  739,  740,  741,  742,  733,
      743,  744,  745,  748,  722,  723,  749,  750,  751,  752,
      753,  727,  728,  754,  729,  730,  731,  732,  746,  734,
      735,  724,  737,  738,  739,  740,  741,  742,  733,  743,

      744,  745,  748,  755,  747,  749,  750,  751,  752,  753,
       62,  396,  754,  398,  756,  757,  758,  746,  759,  760,
      481,  761,  762,  763,  764,  765,  766,  767, 1226,  768,
     1226, 1226,  755,  747,  769,  770,  771,  772,  773,  774,
      775,  776,  777,  756,  757,  758,  780,  759,  760,  481,
      761,  762,  763,  764,  765,  766,  767,  596,  768,  395,
      594,  778,  781,  769,  770,  771,  772,  773,  774,  775,
      776,  777,  782,  783,  784,  780,  785,  786,  787,  779,
      788,  789,  790,  791,  792,  793,  795,  796,  797,  798,
      778,  781,  799,  801,  802,  803,  804,  805,  800,  806,

      807,  782,  783,  784,  808,  785,  786,  787,  779,  788,
      789,  790,  791,  792,  793,  795,  796,  797,  798,  809,
      810,  799,  801,  802,  803,  804,  805,  800,  806,  807,
      811,  812,  813,  808,  814,  815,  816,  817,  818,  819,
      820,  821,  822,  823,  824,  825,  826,  827,  809,  810,
      828,  829,  830,  831,  832,  833,  834,  835,  836,  811,
      812,  813,  837,  814,  815,  816,  817,  818,  819,  820,
      821,  822,  823,  824,  825,  826,  827,  838,  839,  828,
      829,  830,  831,  832,  833,  834,  835,  836,  840,  841,
      842,  837,  843,  844,  845,  846,  847,  848,  849,  850,

      851,  852,  853,  854,  855,  856,  838,  839,  857,  858,
      859,  860,  861,  862,  863,  864,  865,  840,  841,  842,
      866,  843,  844,  845,  846,  847,  848,  849,  850,  851,
      852,  853,  854,  855,  856,  867,  868,  857,  858,  859,
      860,  861,  862,  863,  864,  865,  869,  870,  871,  866,
      872,  873,  875,  876,  877,  878,  879,  880,  881,  882,
      883,  884,  885,  886,  867,  868,  887,  888,  889,  890,
      891,  892,  893,  894,  895,  869,  870,  871,  896,  872,
      873,  875,  876,  877,  878,  879,  880,  881,  882,  883,
      884,  885,  886,  897,  898,  887,  888,  889,  890,  891,

      892,  893,  894,  895,  899,  900,  901,  896,  902,  903,
      904,  905,  906,  907,  908,  909,  910,  911,  912,  913,
      914,  915,  897,  898,  916,  917,  918,  919,  920,  921,
      922, 1226,  926,  899,  900,  901,  927,  902,  903,  904,
      905,  906,  907,  908,  909,  910,  911,  912,  913,  914,
      915,  929,  930,  916,  917,  918,  919,  920,  921,  922,
      923,  926,  931,  932,  933,  927,  934,  924,  935,  936,
      937,  938,  939,  940,  941,  942,  943,  944,  925,  945,
      929,  930,  946,  947,  949,  950,  951,  952,  953,  923,
      954,  931,  932,  933,  955,  934,  924,  935,  936,  937,

      938,  939,  940,  941,  942,  943,  944,  925,  945,  956,
      957,  946,  947,  949,  950,  951,  952,  953,  958,  954,
      959,  960,  961,  955,  964,  965,  966,  962,  478,  967,
      968,  969,  970,  971,  972,  973,  974,  975,  956,  957,
      976,  977,  978,  979,  980,  981,  982,  958,  983,  959,
      960,  961,  963,  964,  965,  966,  986,  478,  967,  968,
      969,  970,  971,  972,  973,  974,  975,  987,  988,  976,
      977,  978,  979,  980,  981,  982,  989,  983,  990,  991,
      992,  963,  993,  994,  995,  986,  998,  996,  999, 1000,
     1001, 1002, 1003, 1004, 1005, 1006,  987,  988,  997, 1007,

     1008, 1009, 1012, 1013, 1010,  989, 1014,  990,  991,  992,
     1011,  993,  994,  995, 1015,  998,  996,  999, 1000, 1001,
     1002, 1003, 1004, 1005, 1006, 1016, 1017,  997, 1007, 1008,
     1009, 1012, 1013, 1010, 1018, 1014, 1019, 1020, 1021, 1011,
     1022, 1023, 1024, 1015,  479, 1025, 1026, 1027, 1028, 1030,
     1031, 1032, 1033, 1034, 1016, 1017, 1035, 1036, 1037, 1038,
     1039, 1040, 1041, 1018, 1042, 1019, 1020, 1021, 1043, 1022,
     1023, 1024, 1044,  479, 1025, 1026, 1027, 1028, 1030, 1031,
     1032, 1033, 1034, 1045, 1046, 1035, 1036, 1037, 1038, 1039,
     1040, 1041, 1047, 1042, 1049, 1050, 1054, 1043, 1051, 1057,

     1058, 1044, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
     1067, 1068, 1045, 1046, 1052, 1053, 1069, 1070, 1071, 1072,
     1073, 1047, 1075, 1049, 1050, 1054, 1076, 1051, 1057, 1058,
     1077, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
     1068, 1078, 1079, 1052, 1053, 1069, 1070, 1071, 1072, 1073,
     1080, 1075, 1081, 1082, 1083, 1076, 1084, 1085, 1086, 1077,
     1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
     1078, 1079, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1080,
     1106, 1081, 1082, 1083, 1107, 1084, 1085, 1086, 1108, 1088,
     1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1109,

     1110, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1111, 1106,
     1112, 1113, 1114, 1107, 1115, 1116, 1117, 1108, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1109, 1110,
     1129, 1130, 1131, 1132, 1133, 1134, 1135, 1111, 1136, 1112,
     1113, 1114, 1137, 1115, 1116, 1117, 1138, 1118, 1119, 1120,
     1121, 1122, 1123, 1124, 1125, 1127, 1128, 1139, 1140, 1129,
     1130, 1131, 1132, 1133, 1134, 1135, 1141, 1136, 1142, 1143,
     1144, 1137, 1145, 1146, 1147, 1138, 1148, 1149, 1150, 1151,
     1152, 1153, 1154, 1155, 1156, 1157, 1139, 1140, 1158, 1159,
     1160, 1161, 1162, 1163, 1164, 1141, 1165, 1142, 1143, 1144,

     1166, 1145, 1146, 1147, 1167, 1148, 1149, 1150, 1151, 1152,
     1153, 1154, 1155, 1156, 1157, 1169, 1170, 1158, 1159, 1160,
     1161, 1162, 1163, 1164, 1171, 1165, 1172, 1173, 1174, 1166,
     1175, 1176, 1177, 1167, 1178, 1179, 1180, 1181, 1182, 1183,
     1184, 1185, 1186, 1187, 1169, 1170, 1188, 1189, 1190, 1191,
     1192, 1193, 1194, 1171, 1195, 1172, 1173, 1174, 1196, 1175,
     1176, 1177, 1197, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
     1185, 1186, 1187, 1198, 1199, 1188, 1189, 1190, 1191, 1192,
     1193, 1194, 1200, 1195, 1201, 1202, 1203, 1196, 1204, 1205,
     1206, 1197, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,

     1216, 1217, 1198, 1199, 1218, 1219, 1220, 1221, 1222, 1223,
     1224, 1200, 1225, 1201, 1202, 1203, 1226, 1204, 1205, 1206,
     1226, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
     1217, 1226, 1226, 1218, 1219, 1220, 1221, 1222, 1223, 1224,
     1226, 1225,   56,   56,   56,   56,   56,   56,   56,   56,
       60,   60,   60,   60,   60,   60,   60,   60,   64, 1226,
       64,   64,   64,   64,   64,   64,   66,   66,   66,   66,
       66,   66,   66,   66,   87,   87,   87,   87,   87,   87,
       90,   90,  191,  191,  191,  191,  191,  191,  191,  198,
      198,  198,  198,  198,  198,  198,  198,  202,  202,  202,

      202,  202,  202,  202,  202,  215,  215, 1226,  215,  215,
      215,  215,  215,  217,  217,  217,  217, 1226,  217,  217,
      217,  219,  219,  219,  219,  219,  219,  219,  193,  193,
      193,  193,  193,  193,  193,  197, 1226,  197,  197,  197,
      197,  197,  197,  201, 1226,  201,  201,  201,  201,  201,
      201,  399, 1226,  399,  399,  399,  399,  399,  399,  593,
     1226,  593,  593,  593,  593,  593,  593,  595, 1226,  595,
      595,  595,  595,  595,  595,    7, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,

     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226
    } ;

static yyconst flex_int16_t yy_chk[2760] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    6,   12,   16,   12,   24,   24,
       24,   34,   17,   16,   17,   17,   17,   17,   17,   17,

       18,   18,   37,   18,   18,   18,   18,   18,   18,   26,
       26, 1240,    5,    6,   19,   19,   19,   19,   19,   19,
       34,   22,   44,   22,   22,   22,   22,   22,   22,   19,
       27,   37,   77,   77, 1236,   27,   12,   16,   22,  215,
       35,  215,   49,   98,   98,   66,  217,   51,   35,   69,
     1200,   44,   66,  217,   35,   60,   69,   60,   19,   21,
       52,   21,   21,   21,   21,   21,   21,   22,   30,   35,
       31,   49,   41,   21,   31,   30,   21,   35,   31,   51,
     1147,   27,   30,   35,   31,   30,   41,   31,   30,   52,
       31, 1090,   41,   87,   53,   21,   66,   30,   87,   31,

       69,   41,   21,   31,   30,   21,   60,   31,   51,   32,
       91,   30,   94,   31,   30,   41,   31,   30, 1088,   31,
       32,   41,   32,   53,   21,   28,   38,   32,   92,   95,
       38,   96,   32,   28,   54,   28,   92,   28,   32,   91,
       28,   94,   28,   28,   87, 1033,   54,   54, 1030,   32,
       97,   32,  101, 1013,   28,   38,   32,   92,   95,   38,
       96,   32,   28,   33,   28,   92,   28,   33,  102,   28,
      989,   28,   28,   29,   33,  210,  210,   33,   39,   97,
       33,  101,   39,   33,  988,   54,  980,  103,   39,   63,
       40,   63,   33,  957,   40,   29,   33,  102,   40,   29,

       36,   36,   29,   33,   40,   29,   33,   39,   36,   33,
       29,   39,   33,   36,   36,   29,  103,   39,   42,   40,
       42,   43,   42,   40,   29,   42,  219,   40,   29,   36,
       36,   29,   50,   40,   29,   50,   50,   36,   43,   29,
       63,   43,   36,   36,   29,   50,  109,   42,   45,   42,
       43,   42,   45,  894,   42,   45,  644,  644,   45,  893,
      844,   50,  113,  816,   50,   50,  743,   43,  567,   93,
       43,  471,   93,  470,   50,  109,  100,   45,  197,  219,
       48,   45,   48,  100,   45,   48,   48,   45,   46,  100,
       46,  113,   46,   93,  421,   46,   99,   99,   93,  114,

       46,   93,   46,   46,   46,  100,   46,   46,   46,   48,
       99,   48,  100,  395,   48,   48,  105,   46,  100,   46,
      108,   46,   93,  105,   46,   99,   99,  197,  114,   46,
      108,   46,   46,   46,   47,   46,   46,   46,   47,   99,
      106,   47,   47,  112,  106,  105,  112,  116,   47,  108,
      408,   47,  105,   70,   70,   70,   70,   70,   70,  108,
      389,  110,  395,   47,  201,  381,  110,   47,   70,  106,
       47,   47,  112,  106,  305,  112,  116,   47,   74,   74,
       47,   58,   74,   74,   74,   74,   74,   74,  193,   58,
      110,   58,  117,   58,  115,  110,   58,   70,   58,   58,

       71,  397,   71,   71,   71,   71,   71,   71,  201,  115,
       58,   73,   73,   73,   73,   73,   73,   71,   58,  119,
       58,  117,   58,  115,   89,   58,   73,   58,   58,   76,
       76,   76,   76,   76,   76,   88,   86,  118,  115,   82,
      120,  121,   72,  122,   76,  397,   71,  120,  119,  123,
      124,  107,   78,   78,  118,   73,   78,   78,   78,   78,
       78,   78,  107,  107,  107,  111,  118,  125,  111,  120,
      121,  107,  122,   76,  111,  126,  120,  129,  123,  124,
      107,  111,  111,  118,  127,  128,  130,  132,  128,   68,
      135,  107,  107,  107,  111,  136,  125,  111,  127,   62,

      107,  137,  138,  111,  126,   57,  129,  139,   55,   23,
      111,  111,  139,  127,  128,  130,  132,  128,  133,  135,
      133,   20,   15,  140,  136,  140,  140,  127,  133,  133,
      137,  138,  143,  133,  133,  146,  139,  141,  142,  141,
      147,  139,  142,  145,  150,  144,  144,  133,  147,  133,
      141,  141,  140,  145,  140,  140,  144,  133,  133,  141,
      151,  143,  133,  133,  146,  152,  141,  142,  141,  147,
      153,  142,  145,  150,  144,  144,  148,  148,  155,  141,
      141,  158,  145,  154,  156,  144,  159,  154,  141,  151,
      160,  161,  156,  154,  152,  162,  164,  165,  168,  153,

      396,  166,  166,  169,  172,  148,  148,  155,   11,    7,
      158,    4,  154,  156,  167,  159,  154,    3,  167,  160,
      161,  156,  154,  157,  162,  164,  165,  168,  157,  157,
      166,  166,  169,  172,  157,  174,  157,  163,  157,  157,
      171,  157,  157,  167,  157,  170,  163,  167,  163,  396,
      163,  171,  157,  181,  163,  175,  175,  157,  157,    0,
      179,  183,  170,  157,  174,  157,  163,  157,  157,  171,
      157,  157,  179,  157,  170,  163,  173,  163,  177,  163,
      171,  173,  181,  163,  175,  175,  177,  173,  178,  179,
      183,  170,  185,  178,  186,  178,  178,  188,  177,  189,

      180,  179,  190,  178,  180,  173,  182,  177,  180,  184,
      173,  223,  182,  184,  398,  177,  173,  178,  198,    0,
      198,  185,  178,  186,  178,  178,  188,  177,  189,  180,
        0,  190,  178,  180,  191,  182,  196,  180,  184,  196,
      223,  182,  184,  199,  202,  199,  191,  191,  200,  203,
      200,  202,  204,  224,  227,  229,  203,  232,  398,  204,
      196,    0,  233,  234,  235,  196,    0,  236,  196,  198,
      206,  206,  206,  206,  206,  206,  207,  207,  207,  207,
      207,  207,  224,  227,  229,  191,  232,  191,    0,  196,
      231,  233,  234,  235,  199,  202,  236,  231,  231,  200,

      203,    0,  595,  204,  208,  208,  208,  208,  208,  208,
      211,  211,  211,  211,  211,  211,  209,  209,  238,  208,
      209,  209,  209,  209,  209,  209,  212,  212,  212,  212,
      212,  212,  239,  240,  241,  242,  243,  242,  244,  245,
      243,  246,  247,    0,    0,  249,  595,  238,  208,  250,
      246,  251,  242,  252,  252,  253,  256,  248,    0,  253,
        0,  239,  240,  241,  242,  243,  242,  244,  245,  243,
      246,  247,  248,  248,  249,  248,  258,  259,  250,  246,
      251,  242,  252,  252,  253,  256,  248,  255,  253,  257,
      255,  260,  262,  257,  263,  264,  265,  266,  267,  269,

      270,  248,  248,  272,  248,  258,  259,  271,  271,  273,
      274,  275,  276,  277,  276,  278,  255,  279,  257,  255,
      260,  262,  257,  263,  264,  265,  266,  267,  269,  270,
      280,  281,  272,  282,  283,  284,  271,  271,  273,  274,
      275,  276,  277,  276,  278,  285,  279,  286,  287,  288,
      289,  290,    0,  292,  293,  294,  295,  296,  297,  280,
      281,  298,  282,  283,  284,  299,  300,  291,  291,  301,
      291,  291,  303,  304,  285,  296,  286,  287,  288,  289,
      290,  291,  292,  293,  294,  295,  296,  297,  306,  302,
      298,  291,  308,  309,  299,  300,  310,  311,  301,  302,

      312,  303,  304,  313,  296,  314,  316,  317,  318,  319,
      291,  318,  320,  321,  321,  322,  323,  306,  302,  324,
      291,  308,  309,  325,  326,  310,  311,  327,  302,  312,
      325,  328,  313,  330,  314,  316,  317,  318,  319,  329,
      318,  320,  321,  321,  322,  323,  331,  329,  324,  332,
      333,  334,  325,  326,  335,  336,  327,  337,  334,  325,
      328,  338,  330,  339,  340,  341,  342,  343,  329,  344,
      345,  346,  347,  349,  350,  331,  329,  351,  332,  333,
      334,  352,  353,  335,  336,  354,  337,  334,  357,    0,
      338,  358,  339,  340,  341,  342,  343,  359,  344,  345,

      346,  347,  349,  350,  355,  361,  351,  362,  363,  364,
      352,  353,  365,  366,  354,  367,  368,  357,  355,  369,
      358,  370,  355,  371,  373,  369,  359,  355,  372,  374,
      372,  375,  376,  355,  361,  377,  362,  363,  364,  378,
      380,  365,  366,  382,  367,  368,  384,  355,  369,    0,
      370,  355,  371,  373,  369,  383,  383,  372,  374,  372,
      375,  376,  385,  386,  377,  387,  385,  388,  378,  380,
      391,  392,  382,    0,    0,  384,    0,    0,  383,    0,
        0,    0,    0,    0,  383,  383,  405,  406,  407,  410,
      411,  385,  386,  412,  387,  385,  388,  413,  414,  391,

      392,  400,  400,  400,  400,  400,  400,  383,  401,  401,
      401,  401,  401,  401,  417,  405,  406,  407,  410,  411,
      419,  422,  412,  423,  424,  425,  413,  414,  426,  427,
      428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
      438,  440,  441,  417,  442,  443,  444,  439,  445,  419,
      422,  446,  423,  424,  425,  439,  447,  426,  427,  428,
      429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
      440,  441,  448,  442,  443,  444,  439,  445,  451,  453,
      446,  455,  456,  458,  459,  447,  460,  461,  462,  463,
      465,  466,  467,  469,  472,  473,  474,  475,  476,  477,

        0,  448,  484,  477,  488,  489,  492,  451,  453,  493,
      455,  456,  458,  459,  495,  460,  461,  462,  463,  465,
      466,  467,  469,  472,  473,  474,  475,  476,  477,  482,
      497,  484,  477,  488,  489,  492,  499,  500,  493,  501,
      482,  502,  503,  495,  504,  505,  506,  507,  497,  508,
      510,  511,  512,  513,  512,  514,  515,  516,  482,  497,
      517,  518,  519,  520,  521,  499,  500,  522,  501,  482,
      502,  503,  523,  504,  505,  506,  507,  497,  508,  510,
      511,  512,  513,  512,  514,  515,  516,  524,  526,  517,
      518,  519,  520,  521,  527,  528,  522,  529,  530,  531,

      532,  523,  533,  534,  535,  536,  537,  538,  539,  540,
      541,  542,  543,  544,  546,  548,  524,  526,  549,  550,
      551,  552,  553,  527,  528,  555,  529,  530,  531,  532,
      556,  533,  534,  535,  536,  537,  538,  539,  540,  541,
      542,  543,  544,  546,  548,  554,  554,  549,  550,  551,
      552,  553,  557,  558,  555,  559,  560,  563,  564,  556,
      565,  566,  554,  570,  571,  572,  573,  574,  575,  564,
      576,  577,  578,  580,  554,  554,  581,  582,  583,  586,
      587,  557,  558,  589,  559,  560,  563,  564,  579,  565,
      566,  554,  570,  571,  572,  573,  574,  575,  564,  576,

      577,  578,  580,  592,  579,  581,  582,  583,  586,  587,
      593,  594,  589,  596,  598,  599,  600,  579,  601,  603,
      604,  605,  607,  609,  610,  612,  613,  614,    0,  615,
        0,    0,  592,  579,  616,  617,  618,  619,  621,  623,
      624,  625,  626,  598,  599,  600,  628,  601,  603,  604,
      605,  607,  609,  610,  612,  613,  614,  596,  615,  593,
      594,  627,  629,  616,  617,  618,  619,  621,  623,  624,
      625,  626,  630,  631,  632,  628,  633,  634,  635,  627,
      636,  637,  638,  639,  640,  641,  646,  647,  650,  651,
      627,  629,  652,  653,  655,  658,  659,  660,  652,  661,

      662,  630,  631,  632,  663,  633,  634,  635,  627,  636,
      637,  638,  639,  640,  641,  646,  647,  650,  651,  667,
      668,  652,  653,  655,  658,  659,  660,  652,  661,  662,
      669,  670,  672,  663,  673,  674,  675,  676,  678,  679,
      680,  681,  682,  683,  686,  687,  688,  689,  667,  668,
      690,  691,  693,  696,  697,  698,  699,  700,  701,  669,
      670,  672,  702,  673,  674,  675,  676,  678,  679,  680,
      681,  682,  683,  686,  687,  688,  689,  703,  704,  690,
      691,  693,  696,  697,  698,  699,  700,  701,  705,  708,
      709,  702,  710,  711,  712,  713,  714,  715,  716,  717,

      718,  719,  720,  721,  722,  723,  703,  704,  724,  725,
      726,  727,  728,  729,  730,  731,  732,  705,  708,  709,
      733,  710,  711,  712,  713,  714,  715,  716,  717,  718,
      719,  720,  721,  722,  723,  734,  735,  724,  725,  726,
      727,  728,  729,  730,  731,  732,  738,  739,  740,  733,
      741,  742,  746,  747,  748,  749,  750,  751,  755,  756,
      758,  760,  762,  764,  734,  735,  765,  766,  768,  769,
      770,  771,  772,  774,  776,  738,  739,  740,  777,  741,
      742,  746,  747,  748,  749,  750,  751,  755,  756,  758,
      760,  762,  764,  778,  779,  765,  766,  768,  769,  770,

      771,  772,  774,  776,  780,  781,  782,  777,  783,  785,
      786,  787,  789,  791,  793,  795,  796,  798,  799,  800,
      803,  805,  778,  779,  806,  807,  808,  809,  810,  811,
      812,    0,  814,  780,  781,  782,  815,  783,  785,  786,
      787,  789,  791,  793,  795,  796,  798,  799,  800,  803,
      805,  817,  818,  806,  807,  808,  809,  810,  811,  812,
      813,  814,  819,  821,  822,  815,  823,  813,  824,  825,
      826,  827,  828,  829,  830,  831,  833,  836,  813,  837,
      817,  818,  838,  843,  846,  847,  848,  850,  851,  813,
      852,  819,  821,  822,  853,  823,  813,  824,  825,  826,

      827,  828,  829,  830,  831,  833,  836,  813,  837,  854,
      855,  838,  843,  846,  847,  848,  850,  851,  856,  852,
      857,  858,  859,  853,  862,  863,  864,  860,  865,  866,
      867,  868,  870,  872,  875,  876,  878,  879,  854,  855,
      880,  881,  883,  886,  887,  890,  891,  856,  892,  857,
      858,  859,  860,  862,  863,  864,  895,  865,  866,  867,
      868,  870,  872,  875,  876,  878,  879,  896,  897,  880,
      881,  883,  886,  887,  890,  891,  898,  892,  903,  904,
      905,  860,  906,  910,  911,  895,  913,  912,  914,  916,
      919,  920,  921,  922,  923,  924,  896,  897,  912,  925,

      926,  927,  929,  931,  928,  898,  933,  903,  904,  905,
      928,  906,  910,  911,  934,  913,  912,  914,  916,  919,
      920,  921,  922,  923,  924,  936,  937,  912,  925,  926,
      927,  929,  931,  928,  939,  933,  940,  942,  946,  928,
      948,  949,  950,  934,  951,  953,  954,  955,  956,  958,
      959,  960,  961,  963,  936,  937,  964,  965,  966,  967,
      968,  971,  972,  939,  973,  940,  942,  946,  974,  948,
      949,  950,  975,  951,  953,  954,  955,  956,  958,  959,
      960,  961,  963,  977,  978,  964,  965,  966,  967,  968,
      971,  972,  979,  973,  981,  982,  986,  974,  985,  991,

      992,  975,  993,  995,  996,  997,  998,  999, 1001, 1004,
     1005, 1006,  977,  978,  985,  985, 1007, 1008, 1009, 1010,
     1011,  979, 1015,  981,  982,  986, 1016,  985,  991,  992,
     1017,  993,  995,  996,  997,  998,  999, 1001, 1004, 1005,
     1006, 1018, 1019,  985,  985, 1007, 1008, 1009, 1010, 1011,
     1020, 1015, 1022, 1023, 1024, 1016, 1026, 1028, 1029, 1017,
     1031, 1034, 1035, 1036, 1037, 1042, 1043, 1044, 1046, 1050,
     1018, 1019, 1051, 1052, 1053, 1057, 1058, 1060, 1061, 1020,
     1062, 1022, 1023, 1024, 1063, 1026, 1028, 1029, 1064, 1031,
     1034, 1035, 1036, 1037, 1042, 1043, 1044, 1046, 1050, 1065,

     1066, 1051, 1052, 1053, 1057, 1058, 1060, 1061, 1067, 1062,
     1069, 1070, 1072, 1063, 1073, 1074, 1075, 1064, 1076, 1079,
     1080, 1081, 1084, 1085, 1086, 1087, 1089, 1092, 1065, 1066,
     1094, 1096, 1097, 1099, 1100, 1101, 1102, 1067, 1103, 1069,
     1070, 1072, 1104, 1073, 1074, 1075, 1105, 1076, 1079, 1080,
     1081, 1084, 1085, 1086, 1087, 1089, 1092, 1106, 1107, 1094,
     1096, 1097, 1099, 1100, 1101, 1102, 1108, 1103, 1109, 1110,
     1113, 1104, 1114, 1115, 1116, 1105, 1118, 1121, 1122, 1124,
     1125, 1126, 1127, 1129, 1130, 1131, 1106, 1107, 1132, 1133,
     1134, 1135, 1137, 1138, 1142, 1108, 1143, 1109, 1110, 1113,

     1145, 1114, 1115, 1116, 1146, 1118, 1121, 1122, 1124, 1125,
     1126, 1127, 1129, 1130, 1131, 1149, 1150, 1132, 1133, 1134,
     1135, 1137, 1138, 1142, 1151, 1143, 1152, 1153, 1154, 1145,
     1155, 1156, 1157, 1146, 1159, 1161, 1162, 1163, 1164, 1166,
     1167, 1168, 1169, 1171, 1149, 1150, 1172, 1173, 1174, 1175,
     1177, 1178, 1181, 1151, 1182, 1152, 1153, 1154, 1183, 1155,
     1156, 1157, 1185, 1159, 1161, 1162, 1163, 1164, 1166, 1167,
     1168, 1169, 1171, 1186, 1187, 1172, 1173, 1174, 1175, 1177,
     1178, 1181, 1188, 1182, 1189, 1193, 1194, 1183, 1196, 1197,
     1198, 1185, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,

     1209, 1211, 1186, 1187, 1212, 1213, 1214, 1217, 1218, 1219,
     1220, 1188, 1224, 1189, 1193, 1194,    0, 1196, 1197, 1198,
        0, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
     1211,    0,    0, 1212, 1213, 1214, 1217, 1218, 1219, 1220,
        0, 1224, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1229,    0,
     1229, 1229, 1229, 1229, 1229, 1229, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1231, 1231, 1231, 1231, 1231, 1231,
     1232, 1232, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1235, 1235, 1235,

     1235, 1235, 1235, 1235, 1235, 1237, 1237,    0, 1237, 1237,
     1237, 1237, 1237, 1238, 1238, 1238, 1238,    0, 1238, 1238,
     1238, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1242,    0, 1242, 1242, 1242,
     1242, 1242, 1242, 1243,    0, 1243, 1243, 1243, 1243, 1243,
     1243, 1244,    0, 1244, 1244, 1244, 1244, 1244, 1244, 1245,
        0, 1245, 1245, 1245, 1245, 1245, 1245, 1246,    0, 1246,
     1246, 1246, 1246, 1246, 1246, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,

     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[294] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sql.l"
/*
 * Scanner for mysql subset, GLR version
 */
#line 9 "sql.l"
#include <stdarg.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <malloc.h>
#include "sql.tab.hpp"
#include "../ast_node/ast_node.h"
int oldstate;
extern void yyerror(struct ParseResult *pp,const char *s, ...);
void GetCorrectString(char *dest, const char *src);



#line 1499 "lex.yy.c"

#define INITIAL 0
#define COMMENT 1
#define BTWMODE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

int yyget_column  (yyscan_t yyscanner );

void yyset_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 25 "sql.l"


struct ParseResult *pp =(struct ParseResult *) yyextra;

  /* keywords */

#line 1745 "lex.yy.c"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1227 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2676 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "sql.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 32 "sql.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 33 "sql.l"
{ return ALTER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 34 "sql.l"
{ return ANALYZE; }
	YY_BREAK
/* Hack for BETWEEN ... AND ... 
   * return special AND token if BETWEEN seen
   */
case 5:
YY_RULE_SETUP
#line 39 "sql.l"
{ BEGIN INITIAL; return AND; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 40 "sql.l"
{ return ANDOP; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 41 "sql.l"
{ return ANY; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 42 "sql.l"
{ return APPEND; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 43 "sql.l"
{ return AS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 44 "sql.l"
{ return ASC; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 45 "sql.l"
{ return AUTO_INCREMENT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 46 "sql.l"
{ return BEFORE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 47 "sql.l"
{ BEGIN BTWMODE; return BETWEEN; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 48 "sql.l"
{ return BIGINT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 49 "sql.l"
{ return BINARY; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 50 "sql.l"
{ return BIT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 51 "sql.l"
{ return BLOB; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 52 "sql.l"
{ return BOTH; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 53 "sql.l"
{ return BTREE;}	
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 54 "sql.l"
{ return BY; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 55 "sql.l"
{ return CALL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 56 "sql.l"
{ return CASCADE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 57 "sql.l"
{ return CASE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 58 "sql.l"
{ return CHANGE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 59 "sql.l"
{ return CHAR; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 60 "sql.l"
{ return CHECK; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 61 "sql.l"
{ return COLLATE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 62 "sql.l"
{ return COLUMN; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 63 "sql.l"
{ return COMMENT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 64 "sql.l"
{ return CONDITION; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 65 "sql.l"
{ return CONSTRAINT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 66 "sql.l"
{ return CONTINUE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 67 "sql.l"
{ return CONVERT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 68 "sql.l"
{ return CREATE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 69 "sql.l"
{ return CROSS; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 70 "sql.l"
{ return CURRENT_DATE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 71 "sql.l"
{ return CURRENT_TIME; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 72 "sql.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 73 "sql.l"
{ return CURRENT_USER; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 74 "sql.l"
{ return CURSOR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 75 "sql.l"
{ return DATABASE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 76 "sql.l"
{ return DATABASES; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 77 "sql.l"
{ return DAY;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 78 "sql.l"
{ return DATE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 79 "sql.l"
{ return DATETIME; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 80 "sql.l"
{ return DAY_HOUR; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 81 "sql.l"
{ return DAY_MICROSECOND; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 82 "sql.l"
{ return DAY_MINUTE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 83 "sql.l"
{ return DAY_SECOND; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 84 "sql.l"
{ return DECIMAL; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 85 "sql.l"
{ return DECLARE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 86 "sql.l"
{ return DEFAULT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 87 "sql.l"
{ return DELAYED; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 88 "sql.l"
{ return DELETE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 89 "sql.l"
{ return DESC; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 90 "sql.l"
{ return DESCRIBE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 91 "sql.l"
{ return DETERMINISTIC; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 92 "sql.l"
{ return DISTINCT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 93 "sql.l"
{ return DISTINCTROW; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 94 "sql.l"
{ return DIV; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 95 "sql.l"
{ return DOUBLE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 96 "sql.l"
{ return DROP; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 97 "sql.l"
{ return DUAL; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 98 "sql.l"
{ return EACH; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 99 "sql.l"
{ return ELSE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 100 "sql.l"
{ return ELSEIF; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 101 "sql.l"
{ return END; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 102 "sql.l"
{ return ENUM; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 103 "sql.l"
{ return ESCAPED; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 104 "sql.l"
{ return EXISTS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 105 "sql.l"
{ return EXIT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 106 "sql.l"
{ return EXPLAIN; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 107 "sql.l"
{ return FETCH; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 108 "sql.l"
{ return FLOAT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 109 "sql.l"
{ return FOR; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 110 "sql.l"
{ return FORCE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 111 "sql.l"
{ return FOREIGN; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 112 "sql.l"
{ return FROM; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 113 "sql.l"
{ return FULL; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 114 "sql.l"
{ return FULLTEXT; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 115 "sql.l"
{ return GRANT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 116 "sql.l"
{ return GROUP; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 117 "sql.l"
{ return HASH; }	
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 118 "sql.l"
{ return HAVING; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 119 "sql.l"
{ return HIGH_PRIORITY; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 120 "sql.l"
{ return HOUR_MICROSECOND; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 121 "sql.l"
{ return HOUR_MINUTE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 122 "sql.l"
{ return HOUR_SECOND; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 123 "sql.l"
{ return IF; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 124 "sql.l"
{ return IGNORE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 125 "sql.l"
{ return IN; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 126 "sql.l"
{ return INFILE; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 127 "sql.l"
{ return INNER; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 128 "sql.l"
{ return INOUT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 129 "sql.l"
{ return INSENSITIVE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 130 "sql.l"
{ return INSERT; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 131 "sql.l"
{ return INTEGER; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 132 "sql.l"
{ return INTERVAL; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 133 "sql.l"
{ return INTO; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 134 "sql.l"
{ return IS; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 135 "sql.l"
{ return ITERATE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 136 "sql.l"
{ return JOIN; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 137 "sql.l"
{ return INDEX; }	
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 138 "sql.l"
{ return KEY; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 139 "sql.l"
{ return KEYS; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 140 "sql.l"
{ return KILL; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 141 "sql.l"
{ return LEADING; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 142 "sql.l"
{ return LEAVE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 143 "sql.l"
{ return LEFT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 144 "sql.l"
{ return LIKE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 145 "sql.l"
{ return LIMIT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 146 "sql.l"
{ return LINES; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 147 "sql.l"
{ return LOAD; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 148 "sql.l"
{ return LOCALTIME; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 149 "sql.l"
{ return LOCALTIMESTAMP; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 150 "sql.l"
{ return LOCK; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 151 "sql.l"
{ return LONG; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 152 "sql.l"
{ return LONGBLOB; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 153 "sql.l"
{ return LONGTEXT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 154 "sql.l"
{ return LOOP; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 155 "sql.l"
{ return LOW_PRIORITY; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 156 "sql.l"
{ return MATCH; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 157 "sql.l"
{ return MEDIUMBLOB; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 158 "sql.l"
{ return MEDIUMINT; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 159 "sql.l"
{ return MEDIUMTEXT; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 160 "sql.l"
{ return MINUTE_MICROSECOND; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 161 "sql.l"
{ return MINUTE_SECOND; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 162 "sql.l"
{ return MOD; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 163 "sql.l"
{ return MODIFIES; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 164 "sql.l"
{ return NATURAL; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 165 "sql.l"
{ return NOT; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 166 "sql.l"
{ return NO_WRITE_TO_BINLOG; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 167 "sql.l"
{ return NULLX; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 168 "sql.l"
{ return NUMBER; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 169 "sql.l"
{ return ON; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 170 "sql.l"
{ return DUPLICATE; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 171 "sql.l"
{ return OPTIMIZE; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 172 "sql.l"
{ return OPTION; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 173 "sql.l"
{ return OPTIONALLY; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 174 "sql.l"
{ return OR; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 175 "sql.l"
{ return ORDER; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 176 "sql.l"
{ return OUT; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 177 "sql.l"
{ return OUTER; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 178 "sql.l"
{ return OUTFILE; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 179 "sql.l"
{ return PARTITIONED; }	
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 180 "sql.l"
{ return PRECISION; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 181 "sql.l"
{ return PRIMARY; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 182 "sql.l"
{ return PROCEDURE; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 183 "sql.l"
{ return PROJECTION; }	
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 184 "sql.l"
{ return PURGE; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 185 "sql.l"
{ return QUICK; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 186 "sql.l"
{ return QUARTER;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 187 "sql.l"
{ return READ; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 188 "sql.l"
{ return READS; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 189 "sql.l"
{ return REAL; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 190 "sql.l"
{ return REFERENCES; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 191 "sql.l"
{ return REGEXP; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 192 "sql.l"
{ return RELEASE; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 193 "sql.l"
{ return RENAME; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 194 "sql.l"
{ return REPEAT; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 195 "sql.l"
{ return REPLACE; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 196 "sql.l"
{ return REQUIRE; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 197 "sql.l"
{ return RESTRICT; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 198 "sql.l"
{ return RETURN; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 199 "sql.l"
{ return REVOKE; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 200 "sql.l"
{ return RIGHT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 201 "sql.l"
{ return ROLLUP; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 202 "sql.l"
{ return SAMPLE; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 203 "sql.l"
{ return SCHEMA; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 204 "sql.l"
{ return SCHEMAS; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 205 "sql.l"
{ return SECOND_MICROSECOND; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 206 "sql.l"
{ return SELECT; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 207 "sql.l"
{ return SENSITIVE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 208 "sql.l"
{ return SEPARATOR; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 209 "sql.l"
{ return SET; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 210 "sql.l"
{ return SHOW; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 211 "sql.l"
{ return SMALLINT; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 212 "sql.l"
{ return SOME; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 213 "sql.l"
{ return SONAME; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 214 "sql.l"
{ return SPATIAL; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 215 "sql.l"
{ return SPECIFIC; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 216 "sql.l"
{ return SQL; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 217 "sql.l"
{ return SQLEXCEPTION; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 218 "sql.l"
{ return SQLSTATE; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 219 "sql.l"
{ return SQLWARNING; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 220 "sql.l"
{ return SQL_BIG_RESULT; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 221 "sql.l"
{ return SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 222 "sql.l"
{ return SQL_SMALL_RESULT; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 223 "sql.l"
{ return SSL; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 224 "sql.l"
{ return STARTING; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 225 "sql.l"
{ return STRAIGHT_JOIN; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 226 "sql.l"
{ return TABLE; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 227 "sql.l"
{ return TABLES; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 228 "sql.l"
{ return TEMPORARY; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 229 "sql.l"
{ return TERMINATED; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 230 "sql.l"
{ return TEXT; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 231 "sql.l"
{ return THEN; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 232 "sql.l"
{ return TIME; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 233 "sql.l"
{ return TIMESTAMP; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 234 "sql.l"
{ return TINYINT; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 235 "sql.l"
{ return TINYTEXT; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 236 "sql.l"
{ return TO; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 237 "sql.l"
{ return TRAILING; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 238 "sql.l"
{ return TRIGGER; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 239 "sql.l"
{ return UNDO; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 240 "sql.l"
{ return UNION; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 241 "sql.l"
{ return UNIQUE; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 242 "sql.l"
{ return UNLOCK; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 243 "sql.l"
{ return UNSIGNED; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 244 "sql.l"
{ return UPDATE; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 245 "sql.l"
{ return USAGE; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 246 "sql.l"
{ return USE; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 247 "sql.l"
{ return USING; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 248 "sql.l"
{ return UTC_DATE; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 249 "sql.l"
{ return UTC_TIME; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 250 "sql.l"
{ return UTC_TIMESTAMP; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 251 "sql.l"
{ return VALUES; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 252 "sql.l"
{ return VARBINARY; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 253 "sql.l"
{ return VARCHAR; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 254 "sql.l"
{ return VARYING; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 255 "sql.l"
{ return WHEN; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 256 "sql.l"
{ return WHERE; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 257 "sql.l"
{ return WEEK;}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 258 "sql.l"
{ return WHILE; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 259 "sql.l"
{ return WITH; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 260 "sql.l"
{ return WRITE; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 261 "sql.l"
{ return XOR; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 262 "sql.l"
{ return YEAR; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 263 "sql.l"
{ return YEAR_MONTH; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 264 "sql.l"
{ return ZEROFILL; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 265 "sql.l"
{ return BEGINT; }
	YY_BREAK
/* numbers */
case 232:
YY_RULE_SETUP
#line 270 "sql.l"
{ yylval->strval = strdup(yytext); return INTNUM; } 	// 2014-4-14---save int value in string type
	YY_BREAK
case 233:
#line 274 "sql.l"
case 234:
#line 275 "sql.l"
case 235:
#line 276 "sql.l"
case 236:
#line 277 "sql.l"
case 237:
YY_RULE_SETUP
#line 278 "sql.l"
{ yylval->strval = strdup(yytext); return APPROXNUM; }	// 2014-4-14---save double value in string type
	YY_BREAK
/* booleans */	// 2014-4-14---save bool value in string type
case 238:
YY_RULE_SETUP
#line 282 "sql.l"
{ yylval->strval = "1"; return BOOL; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 283 "sql.l"
{ yylval->strval = "-1"; return BOOL; }	// 2014-4-14---not supported now---Yu
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 284 "sql.l"
{ yylval->strval = "0"; return BOOL; }
	YY_BREAK
/* strings */
case 241:
#line 290 "sql.l"
case 242:
YY_RULE_SETUP
#line 290 "sql.l"
{
	char *temp = strdup(yytext); 
	yylval->strval = strdup(yytext);
		
	GetCorrectString(yylval->strval, temp);	
	
	return STRING;
}
	YY_BREAK
case 243:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 299 "sql.l"
{ yyerror(pp,"Unterminated string %s", yytext); }
	YY_BREAK
case 244:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 300 "sql.l"
{ yyerror(pp,"Unterminated string %s", yytext); }
	YY_BREAK
/* hex strings */
case 245:
#line 304 "sql.l"
case 246:
YY_RULE_SETUP
#line 304 "sql.l"
{ yylval->strval = strdup(yytext); return STRING; }
	YY_BREAK
/* bit strings */
case 247:
#line 309 "sql.l"
case 248:
YY_RULE_SETUP
#line 309 "sql.l"
{ yylval->strval = strdup(yytext); return STRING; }
	YY_BREAK
/* operators */
case 249:
YY_RULE_SETUP
#line 313 "sql.l"
{ return yytext[0]; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 315 "sql.l"
{ return ANDOP; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 316 "sql.l"
{ return OR; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 318 "sql.l"
{ yylval->subtok = 1; return COMPARISON; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 319 "sql.l"
{ yylval->subtok = 2; return COMPARISON; }
	YY_BREAK
case 254:
#line 321 "sql.l"
case 255:
YY_RULE_SETUP
#line 321 "sql.l"
{ yylval->subtok = 3; return COMPARISON; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 322 "sql.l"
{ yylval->subtok = 4; return COMPARISON; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 323 "sql.l"
{ yylval->subtok = 5; return COMPARISON; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 324 "sql.l"
{ yylval->subtok = 6; return COMPARISON; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 325 "sql.l"
{ yylval->subtok = 12; return COMPARISON; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 327 "sql.l"
{ yylval->subtok = 1; return SHIFT; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 328 "sql.l"
{ yylval->subtok = 2; return SHIFT; }
	YY_BREAK
/* functions */
case 262:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 332 "sql.l"
{ return FSUBSTRING; }
	YY_BREAK
case 263:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 333 "sql.l"
{ return FTRIM; }
	YY_BREAK
case 264:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 334 "sql.l"
{ return FDATE_ADD; }
	YY_BREAK
case 265:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 335 "sql.l"
{ return FDATE_SUB; }
	YY_BREAK
case 266:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 336 "sql.l"
{ return FUPPER; }//---3.25fzh---
	YY_BREAK
case 267:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 337 "sql.l"
{ return FCOALESCE; }
	YY_BREAK
case 268:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 338 "sql.l"
{ return FCAST; }
	YY_BREAK
case 269:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 339 "sql.l"
{ return FCONVERT; }
	YY_BREAK
/* 
         * peek ahead and return function if name(
         */
/* 
        ---2.18add aggrection functions
         */
case 270:
YY_RULE_SETUP
#line 346 "sql.l"
{ int c = yyinput(pp->yyscan_info_); unput(c);
           if(c == '(') return FCOUNT;
           yylval->strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 350 "sql.l"
{ int c = yyinput(pp->yyscan_info_); unput(c);
           if(c == '(') return FSUM;
           yylval->strval = strdup(yytext);
           return NAME; }           
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 354 "sql.l"
{ int c = yyinput(pp->yyscan_info_); unput(c);
           if(c == '(') return FAVG;
           yylval->strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 358 "sql.l"
{ int c = yyinput(pp->yyscan_info_); unput(c);
           if(c == '(') return FMIN;
           yylval->strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 362 "sql.l"
{ int c = yyinput(pp->yyscan_info_); unput(c);
           if(c == '(') return FMAX;
           yylval->strval = strdup(yytext);
           return NAME; } 
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 367 "sql.l"
{ yylval->strval = strdup(yytext);
                          return NAME; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 369 "sql.l"
{ yylval->strval = strdup(yytext+1);
                          yylval->strval[yyleng-2] = 0;
                          return NAME; }
	YY_BREAK
case 277:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 373 "sql.l"
{ yyerror(pp,"unterminated quoted name %s", yytext); }
	YY_BREAK
/* user variables */
case 278:
#line 377 "sql.l"
case 279:
#line 378 "sql.l"
case 280:
#line 379 "sql.l"
case 281:
YY_RULE_SETUP
#line 379 "sql.l"
{ yylval->strval = strdup(yytext+1); return USERVAR; }
	YY_BREAK
case 282:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 381 "sql.l"
{ yyerror(pp,"unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 283:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 382 "sql.l"
{ yyerror(pp,"unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 284:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 383 "sql.l"
{ yyerror(pp,"unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 386 "sql.l"
{ return ASSIGN; }
	YY_BREAK
/* comments */   
case 286:
YY_RULE_SETUP
#line 389 "sql.l"
;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 390 "sql.l"
;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 392 "sql.l"
{ oldstate = YY_START; BEGIN COMMENT; }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 393 "sql.l"
{ BEGIN oldstate; }
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 394 "sql.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 395 "sql.l"
{ yyerror(pp,"unclosed comment"); }
	YY_BREAK
/* everything else */
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 398 "sql.l"
/* white space */ {yylineno++;}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 399 "sql.l"
{ yyerror(pp,"mystery character '%c'", *yytext); }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 401 "sql.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3366 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BTWMODE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1227 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1227 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1226);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 401 "sql.l"


void GetCorrectString(char *dest, const char *src)
{
	int j = 0;
	for(int i = 1; i < strlen(src)-1; ++i)
	{
		if(src[i] == '\\')
		{
			if(src[i+1] == 'n')	// “\\n” -> “\n”
			{
				dest[j++] = '\n';
				++i;
			}
			else if(src[i+1] == 't')	// “\\t” -> “\t”
			{
				dest[j++] = '\t';
				++i;
			}
			else if(src[i+1] == '\'' && (i+1) != (strlen(src)-1))	// “\\\'” -> “\'”
			{
				dest[j++] = '\'';
				++i;
			}
			else if(src[i+1] == '\"' && (i+1) != (strlen(src)-1))	// “\\\"” -> “\"”
			{
				dest[j++] = '\"';
				++i;
			}
			else	
			{
				dest[j++] = src[i];
			}
		}
		else
		{
			dest[j++] = src[i];
		}
	}
	dest[j] = '\0';
}

